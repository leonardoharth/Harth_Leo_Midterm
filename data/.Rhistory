ggplot(Paired_crime_index) +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
#geom_histogram(aes(diff), color = "black", fill = "white", bins = 80) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80, alpha = .5) +
geom_density(alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "white", bins = 80, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
ggplot(Paired_crime_index) +
#geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_histogram(aes(diff), color = "black", fill = "blue", bins = 80, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1)
library(boxr)
library(dplyr)
library(tidyverse)
library(SparkR)
install.packages("SparkR")
library(SparkR)
library(lubridate)
library(ggplot2)
library(plyr)
library(alluvial)
library(formattable)
install.packages("formattable")
library(formattable)
library(grDevices)
box_auth(client_id = "aen7ryeisqdxiifux9ijedh963tu7dq7",
client_secret = "TC86n3d2PZACSappate07N9OQUWIoiLf")
box_auth(client_id = "8rxcahcv6euilk64py1awl96dwue6ff3",
client_secret = "m3i4wglW20Bi2z45r5XlrGijYP71joEu")
box_auth(client_id = "8rxcahcv6euilk64py1awl96dwue6ff3",
client_secret = "m3i4wglW20Bi2z45r5XlrGijYP71joEu")
#Aesthetics
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
panel.background=element_blank(), #Set the entire chart region to blank
plot.background=element_blank(), #Set the entire chart region to blank
#panel.border=element_rect(colour="#F0F0F0"), #color of an optional border
panel.grid.major=element_line(colour="#D0D0D0",size=.2), #color/size of grid lines
axis.ticks=element_blank())
hist_fill <- '#F2BD1D' #yellow
#Data Wrangling: read in data sets
intake1 <- box_read_csv(612487915467) #read intake data in from Box - original data!
assess1 <- box_read_csv(612487563314) #read assessment data in from Box - original data!
assess_sens1 <- box_read_csv(618381545943)
assessSW <- box_read_csv(573178409282) #read OLD assessment WITH SW in from Box- original data
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
#Read in OOH (permanency planning) data separately by year..
ooh2018_1 <- box_read_csv(612491756637)
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
intake2 <- intake1 #intake 1 will remain a copy of the original
count(duplicated(intake1$`Intake Case Reference`)) # 2 duplicate rows, 11424 unique rows
intake2 <- intake2[!duplicated(intake2$`Intake Case Reference`),] #11424 unique rows of intakes (first edit to original intake data)
#Data Wrangling: Re-format dates (to POSIXct and isolate year and month using lubridate)
intake2$`Intake Date` <- as.POSIXct(intake2$`Intake Date`, format="%m/%d/%Y  %H:%M", tz=Sys.timezone()) #converted Intake Date into POSIXct format..
intake2 <- intake2 %>%
dplyr::mutate(year = lubridate::year(intake2$'Intake Date')) %>%  #added year field
dplyr::mutate(month = lubridate:: month(intake2$`Intake Date`))
#Exploratory: Cases by Year (since 2017)
casesByYear <- intake2 %>% #RELEVANT TO NC: group cases by year (but don't set geometry?)
dplyr::group_by(year)%>%
dplyr::count()%>%
ungroup()
hist_byYear <-ggplot(data=casesByYear, aes(x=year, y=n)) + #RELEVANT: plot cases grouped by year
geom_bar(stat="identity", fill= hist_fill)
print(hist_byYear) #histogram of number of intake cases per year - skip
#Exploratory: Cases by Month
casesByMonth <- intake2 %>%
dplyr::filter(year>2017,year<2020) %>%
dplyr::group_by(year, month) %>%
dplyr::count()
line_byMonth <- ggplot(casesByMonth, aes(x=as.factor(month), y=n, color=as.factor(year), group=as.factor(year))) +
geom_line()
#scale color discrete- feed it a vector of colors. scale_fill or scale_color (check ggplot cheat sheet)
#ggplot = grammar of graphics
print(line_byMonth) #
#Exploratory:
casesByMonth <- intake_assessment %>%
dplyr::group_by(year, month) %>%
dplyr::count() #%>%
#Exploratory: Intake Method
names(intake2)[names(intake2)=="Intake Method"] <- "method" #rename to easily call field in group_by()
casesByMethod <- intake2 %>%
dplyr::group_by(method)%>%
dplyr::count()
hist_byMethod <-ggplot(data=casesByMethod, aes(x=method, y=n)) + #plot cases grouped by intake method
geom_bar(stat="identity", fill= hist_fill) #add a title
hist_method <- print(hist_byMethod) #histogram of number of cases recieved by different intake methods
print(hist_byMethod) #histogram of number of cases recieved by different intake methods
#Exploratory: Sankey for just Intake to screen in/screen out
in_dec_grp <- intake2 %>%
dplyr::filter(year == 2019) %>% #filtered to show just 2019
dplyr::group_by(in_decision) %>%
dplyr::count()
#simple sankey to introduce flow before showing more complex sankey
#QUESTION: how to add a bar to left that's "Intake", with all 7,000+, and then break into flows?
alluvial(in_dec_grp[,], freq=test$n) #QUESTION: reorder to make more clear- flip screened out results to top?
#Exploratory: Sankey for just Intake to screen in/screen out
in_dec_grp <- intake2 %>%
dplyr::filter(year == 2019) %>% #filtered to show just 2019
dplyr::group_by(in_decision) %>%
dplyr::count()
#Exploratory: Sankey for just Intake to screen in/screen out
in_dec_grp <- intake2 %>%
dplyr::filter(year == 2019) %>% #filtered to show just 2019
dplyr::group_by(in_decision) %>%
dplyr::count()
hist_fill <- '#F2BD1D' #yellow
#Data Wrangling: read in data sets
intake1 <- box_read_csv(612487915467) #read intake data in from Box - original data!
assess1 <- box_read_csv(612487563314) #read assessment data in from Box - original data!
assess_sens1 <- box_read_csv(618381545943)
assessSW <- box_read_csv(573178409282) #read OLD assessment WITH SW in from Box- original data
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
#Read in OOH (permanency planning) data separately by year..
ooh2018_1 <- box_read_csv(612491756637)
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
intake2 <- intake1 #intake 1 will remain a copy of the original
count(duplicated(intake1$`Intake Case Reference`)) # 2 duplicate rows, 11424 unique rows
intake2 <- intake2[!duplicated(intake2$`Intake Case Reference`),] #11424 unique rows of intakes (first edit to original intake data)
#Data Wrangling: Re-format dates (to POSIXct and isolate year and month using lubridate)
intake2$`Intake Date` <- as.POSIXct(intake2$`Intake Date`, format="%m/%d/%Y  %H:%M", tz=Sys.timezone()) #converted Intake Date into POSIXct format..
intake2 <- intake2 %>%
dplyr::mutate(year = lubridate::year(intake2$'Intake Date')) %>%  #added year field
dplyr::mutate(month = lubridate:: month(intake2$`Intake Date`))
#Exploratory: Cases by Year (since 2017)
casesByYear <- intake2 %>% #RELEVANT TO NC: group cases by year (but don't set geometry?)
dplyr::group_by(year)%>%
dplyr::count()%>%
ungroup()
hist_byYear <-ggplot(data=casesByYear, aes(x=year, y=n)) + #RELEVANT: plot cases grouped by year
geom_bar(stat="identity", fill= hist_fill)
print(hist_byYear) #histogram of number of intake cases per year - skip
#Exploratory: Cases by Month
casesByMonth <- intake2 %>%
dplyr::filter(year>2017,year<2020) %>%
dplyr::group_by(year, month) %>%
dplyr::count()
line_byMonth <- ggplot(casesByMonth, aes(x=as.factor(month), y=n, color=as.factor(year), group=as.factor(year))) +
geom_line()
#scale color discrete- feed it a vector of colors. scale_fill or scale_color (check ggplot cheat sheet)
#ggplot = grammar of graphics
print(line_byMonth) #
#Exploratory:
casesByMonth <- intake_assessment %>%
dplyr::group_by(year, month) %>%
dplyr::count() #%>%
library(boxr)
box_auth(client_id = "8rxcahcv6euilk64py1awl96dwue6ff3",
client_secret = "m3i4wglW20Bi2z45r5XlrGijYP71joEu")
library(boxr)
library(dplyr)
library(tidyverse)
library(SparkR)
library(lubridate)
library(ggplot2)
library(plyr)
library(alluvial)
library(formattable)
library(grDevices)
box_setwd(95769389311)
#Aesthetics
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
panel.background=element_blank(), #Set the entire chart region to blank
plot.background=element_blank(), #Set the entire chart region to blank
#panel.border=element_rect(colour="#F0F0F0"), #color of an optional border
panel.grid.major=element_line(colour="#D0D0D0",size=.2), #color/size of grid lines
axis.ticks=element_blank())
hist_fill <- '#F2BD1D' #yellow
#Data Wrangling: read in data sets
intake1 <- box_read_csv(612487915467) #read intake data in from Box - original data!
assess1 <- box_read_csv(612487563314) #read assessment data in from Box - original data!
assess_sens1 <- box_read_csv(618381545943)
assessSW <- box_read_csv(573178409282) #read OLD assessment WITH SW in from Box- original data
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
#Read in OOH (permanency planning) data separately by year..
ooh2018_1 <- box_read_csv(612491756637)
persons1 <- box_read_csv(612479458123) #read personal demographics data in from Box - original data!
intake2 <- intake1 #intake 1 will remain a copy of the original
count(duplicated(intake1$`Intake Case Reference`)) # 2 duplicate rows, 11424 unique rows
intake2 <- intake2[!duplicated(intake2$`Intake Case Reference`),] #11424 unique rows of intakes (first edit to original intake data)
#Data Wrangling: Re-format dates (to POSIXct and isolate year and month using lubridate)
intake2$`Intake Date` <- as.POSIXct(intake2$`Intake Date`, format="%m/%d/%Y  %H:%M", tz=Sys.timezone()) #converted Intake Date into POSIXct format..
intake2 <- intake2 %>%
dplyr::mutate(year = lubridate::year(intake2$'Intake Date')) %>%  #added year field
dplyr::mutate(month = lubridate:: month(intake2$`Intake Date`))
#Exploratory: Cases by Year (since 2017)
casesByYear <- intake2 %>% #RELEVANT TO NC: group cases by year (but don't set geometry?)
dplyr::group_by(year)%>%
dplyr::count()%>%
ungroup()
hist_byYear <-ggplot(data=casesByYear, aes(x=year, y=n)) + #RELEVANT: plot cases grouped by year
geom_bar(stat="identity", fill= hist_fill)
print(hist_byYear) #histogram of number of intake cases per year - skip
#Exploratory: Cases by Month
casesByMonth <- intake2 %>%
dplyr::filter(year>2017,year<2020) %>%
dplyr::group_by(year, month) %>%
dplyr::count()
line_byMonth <- ggplot(casesByMonth, aes(x=as.factor(month), y=n, color=as.factor(year), group=as.factor(year))) +
geom_line()
#scale color discrete- feed it a vector of colors. scale_fill or scale_color (check ggplot cheat sheet)
#ggplot = grammar of graphics
print(line_byMonth) #
#Exploratory:
casesByMonth <- intake_assessment %>%
dplyr::group_by(year, month) %>%
dplyr::count() #%>%
set.seed(717)
theme_set(theme_bw())
source("1_Package_Setup.R")
source("1_Package_Setup.R")
########### Required Packages ###########
packages = c("dplyr", "bayesplot", "lme4", "rstan", "shinystan", "RcppEigen",
"tidyverse", "tidyr", "AmesHousing", "broom", "caret", "dials", "doParallel", "e1071", "earth",
"ggrepel", "glmnet", "ipred", "klaR", "kknn", "pROC", "rpart", "randomForest",
"sessioninfo", "tidymodels","ranger", "recipes", "workflows", "themis","xgboost",
"sf", "nngeo", "mapview")
for(i in seq_along(packages)){
packge <- as.character(packages[i])
load.fun(packge)
}
Package installs -------------------------------------------------------------
load.fun <- function(x) {
x <- as.character(x)
if(isTRUE(x %in% .packages(all.available=TRUE))) {
eval(parse(text=paste("require(", x, ")", sep="")))
print(paste(c(x, " : already installed; requiring"), collapse=''))
} else {
#update.packages()
print(paste(c(x, " : not installed; installing"), collapse=''))
eval(parse(text=paste("install.packages('", x, "')", sep="")))
print(paste(c(x, " : installed and requiring"), collapse=''))
eval(parse(text=paste("require(", x, ")", sep="")))
}
}
########### Required Packages ###########
packages = c("dplyr", "bayesplot", "lme4", "rstan", "shinystan", "RcppEigen",
"tidyverse", "tidyr", "AmesHousing", "broom", "caret", "dials", "doParallel", "e1071", "earth",
"ggrepel", "glmnet", "ipred", "klaR", "kknn", "pROC", "rpart", "randomForest",
"sessioninfo", "tidymodels","ranger", "recipes", "workflows", "themis","xgboost",
"sf", "nngeo", "mapview")
for(i in seq_along(packages)){
packge <- as.character(packages[i])
load.fun(packge)
}
session_info()
set.seed(717)
theme_set(theme_bw())
"%!in%" <- Negate("%in%")
g <- glimpse
### Set up Ames Housing Data
ames <- make_ames() %>%
dplyr::select(-matches("Qu")) %>%
filter(Neighborhood  %!in% c("Green_Hills", "Landmark", "Blueste", "Greens")) %>%
mutate(Neighborhood = as.character(Neighborhood)) %>%
dplyr::select(Sale_Price, Latitude, Longitude, Pool_QC, Paved_Drive,
Garage_Area, Fireplaces, First_Flr_SF, Full_Bath,
Neighborhood, Lot_Area, Bldg_Type)
ames <- sample_n(ames, 1000)
View(ames)
### Initial Split for Training and Test
data_split <- rsample::initial_split(ames, strata = "Sale_Price", prop = 0.75)
ames_train <- training(data_split)
ames_test  <- testing(data_split)
### Cross Validation
# K-fold, K = 10
cv_splits_v5 <- vfold_cv(ames_train, v = 3, strata = "Sale_Price")
print(cv_splits_geo)
### Cross Validation
# K-fold, K = 10
cv_splits_v5 <- vfold_cv(ames_train, v = 3, strata = "Sale_Price")
# Feature Creation
model_rec <- recipe(Sale_Price ~ ., data = ames_train) %>%
update_role(Neighborhood, new_role = "Neighborhood") %>%
step_other(Neighborhood, threshold = 0.005) %>%
step_dummy(all_nominal(), -Neighborhood) %>%
step_log(Sale_Price) %>%
step_zv(all_predictors()) %>%
step_center(all_predictors(), -Sale_Price) %>%
step_scale(all_predictors(), -Sale_Price) %>%
step_ns(Latitude, Longitude, options = list(df = 4))
# See the data after all transformations
glimpse(model_rec %>% prep() %>% juice())
## Model specifications
lm_plan <-
linear_reg() %>%
set_engine("lm")
glmnet_plan <-
linear_reg() %>%
set_args(penalty  = tune()) %>%
set_args(mixture  = tune()) %>%
set_engine("glmnet")
rf_plan <- rand_forest() %>%
set_args(mtry  = tune()) %>%
set_args(min_n = tune()) %>%
set_args(trees = 1000) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
XGB_plan <- boost_tree() %>%
set_args(mtry  = tune()) %>%
set_args(min_n = tune()) %>%
set_args(trees = 100) %>%
set_engine("xgboost") %>%
set_mode("regression")
# Hyperparameter grid for glmnet (penalization)
glmnet_grid <- expand.grid(penalty = seq(0, 1, by = .20),
mixture = seq(0,1,0.1))
rf_grid <- expand.grid(mtry = c(2,5),
min_n = c(1,5))
xgb_grid <- expand.grid(mtry = c(3,5),
min_n = c(1,5))
# create workflow
lm_wf <-
workflow() %>%
add_recipe(model_rec) %>%
add_model(lm_plan)
glmnet_wf <-
workflow() %>%
add_recipe(model_rec) %>%
add_model(glmnet_plan)
rf_wf <-
workflow() %>%
add_recipe(model_rec) %>%
add_model(rf_plan)
xgb_wf <-
workflow() %>%
add_recipe(model_rec) %>%
add_model(XGB_plan)
# fit model to workflow and calculate metrics
control <- control_resamples(save_pred = TRUE, verbose = TRUE)
lm_tuned <- lm_wf %>%
tune::fit_resamples(.,
resamples = cv_splits_v5,
control   = control,
metrics   = metric_set(rmse, rsq))
glmnet_tuned <- glmnet_wf %>%
tune::tune_grid(.,
resamples = cv_splits_v5,
grid      = glmnet_grid,
control   = control,
metrics   = metric_set(rmse, rsq))
rf_tuned <- rf_wf %>%
tune::tune_grid(.,
resamples = cv_splits_v5,
grid      = rf_grid,
control   = control,
metrics   = metric_set(rmse, rsq))
xgb_tuned <- xgb_wf %>%
tune::tune_grid(.,
resamples = cv_splits_v5,
grid      = xgb_grid,
control   = control,
metrics   = metric_set(rmse, rsq))
## metrics across grid
# autoplot(xgb_tuned)
# collect_metrics(xgb_tuned)
## 'Best' by some metric and margin
show_best(lm_tuned, metric = "rmse", n = 15, maximize = FALSE)
## metrics across grid
# autoplot(xgb_tuned)
# collect_metrics(xgb_tuned)
## 'Best' by some metric and margin
show_best(lm_tuned, metric = "rmse", n = 15, maximize = FALSE)
show_best(glmnet_tuned, metric = "rmse", n = 15, maximize = FALSE)
show_best(rf_tuned, metric = "rmse", n = 15, maximize = FALSE)
show_best(xgb_tuned, metric = "rmse", n = 15, maximize = FALSE)
lm_best_params     <- select_best(lm_tuned, metric = "rmse", maximize = FALSE)
glmnet_best_params <- select_best(glmnet_tuned, metric = "rmse", maximize = FALSE)
rf_best_params     <- select_best(rf_tuned, metric = "rmse", maximize = FALSE)
xgb_best_params    <- select_best(xgb_tuned, metric = "rmse", maximize = FALSE)
## Final workflow
lm_best_wf     <- finalize_workflow(lm_wf, lm_best_params)
glmnet_best_wf <- finalize_workflow(glmnet_wf, glmnet_best_params)
rf_best_wf     <- finalize_workflow(rf_wf, rf_best_params)
xgb_best_wf    <- finalize_workflow(xgb_wf, xgb_best_params)
### Get Out-Fold Predictions for best param set above........ HERE
#start
lm_OOF_preds     <- collect_predictions(lm_tuned)
glmnet_OOF_preds <- collect_predictions(glmnet_tuned) %>%
filter(penalty == glmnet_best_params$penalty[1],
mixture == glmnet_best_params$mixture[1])
rf_OOF_preds     <- collect_predictions(rf_tuned) %>%
filter(mtry  == rf_best_params$mtry[1],
min_n == rf_best_params$min_n[1])
xgb_OOF_preds    <- collect_predictions(xgb_tuned) %>%
filter(mtry  == xgb_best_params$mtry[1],
min_n == xgb_best_params$min_n[1])
# Visualize pred and matrix of hyperparameters
ggplot(collect_metrics(glmnet_tuned) %>% filter(.metric == "rmse"),
aes(x=factor(penalty),y=factor(mixture),fill=mean)) +
geom_raster() +
theme_minimal() +
coord_fixed() +
labs(x="Penalty",y="Mixture",title="Hyperparameter Tune Grid Results") +
scale_fill_viridis_c(option = "A") +
facet_wrap(~.metric)
ggplot(collect_metrics(glmnet_tuned) %>% filter(.metric == "rsq"),
aes(x=factor(penalty),y=factor(mixture),fill=mean)) +
geom_raster() +
theme_minimal() +
coord_fixed() +
labs(x="Penalty",y="Mixture",title="Hyperparameter Tune Grid Results") +
scale_fill_viridis_c(option = "A") +
facet_wrap(~.metric)
ggplot(collect_metrics(rf_tuned) %>% filter(.metric == "rmse"),
aes(x=factor(mtry),y=factor(min_n),fill=mean)) +
geom_raster() +
theme_minimal() +
coord_fixed() +
labs(x="mtry",y="min.node.size",title="Hyperparameter Tune Grid Results") +
scale_fill_viridis_c(option = "A") +
facet_wrap(~.metric)
ggplot(collect_metrics(xgb_tuned) %>% filter(.metric == "rmse"),
aes(x=factor(mtry),y=factor(min_n),fill=mean)) +
geom_raster() +
theme_minimal() +
coord_fixed() +
labs(x="mtry",y="min.node.size",title="Hyperparameter Tune Grid Results") +
scale_fill_viridis_c(option = "A") +
facet_wrap(~.metric)
# last_fit() emulates the process where, after determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set.
lm_val_fit <- lm_best_wf %>%
last_fit(split     = data_split,
control   = control,
metrics   = metric_set(rmse, rsq))
glmnet_val_fit <- glmnet_best_wf %>%
last_fit(split     = data_split,
control   = control,
metrics   = metric_set(rmse, rsq))
rf_val_fit <- rf_best_wf %>%
last_fit(split     = data_split,
control   = control,
metrics   = metric_set(rmse, rsq))
xgb_val_fit <- xgb_best_wf %>%
last_fit(split     = data_split,
control   = control,
metrics   = metric_set(rmse, rsq))
# collect test set predictions
lm_val_pred     <- collect_predictions(lm_val_fit)
glmnet_val_pred <- collect_predictions(glmnet_val_fit)
rf_val_pred     <- collect_predictions(rf_val_fit)
xgb_val_pred    <- collect_predictions(xgb_val_fit)
# show test set metrics
collect_metrics(lm_val_fit)
collect_metrics(glmnet_val_fit)
collect_metrics(rf_val_fit)
collect_metrics(xgb_val_fit)
library(tidymodels)
dat <- ames_train
ames_wflow
dat <- ames_wflow
dat <- ames_wflow$pre
dat <- make_ames()
library(tidymodels)
source("1_Package_Setup.R")
library(AmesHousing)
dat <- make_ames()
View(dat)
setwd("~/UPENN/Box Sync/4th_SEMESTER/Javascript/Harth_Leo_Midterm/data")
setwd("~/UPENN/Box Sync/4th_SEMESTER/Javascript/Harth_Leo_Midterm/data")
library(tidyverse)
df <- read.csv("2018_Building_Energy_Benchmarking.csv")
View(df)
summary(log(df$GHGEmissionsIntensity))
summary(log(df$ENERGYSTARScore))
